import os
import numpy as np
from plot_array import *

# -- LEC lists

lec_list_nucl_1 = {
    '0.10': [-4.6123, -0.1936, -3.8940, -2.3037],  #-283.0033,-11280.2471],
    '0.20': [-6.4580, -0.8196, -8.1672, -3.5258],
    '0.30': [-9.1636, -1.9755, -13.5804, -4.4469],
    '0.40': [-12.5121, -3.6770, -20.2142, -5.0849],
    '0.50': [-16.4416, -5.9296, -28.0746, -5.3996],
    '0.60': [-20.9366, -8.7356, -37.1393, -5.3323],
    '0.70': [-25.9923, -12.0962, -47.3817, -4.8220],
    '0.80': [-31.6067, -16.0120, -58.7735, -3.8083],
    '0.90': [-37.7792, -20.4834, -71.2874, -2.2325],
    '1.00': [-44.4616, -25.5107, -84.9683, -0.1070],
    '1.10': [-51.7480, -31.0941, -99.6513, 2.7614],
    '1.20': [-59.5911, -37.2336, -115.3801, 6.3644],
    '1.30': [-67.9910, -43.9293, -132.1302, 10.7600],
    '1.40': [-76.9475, -51.1814, -149.8776, 16.0070],
    '1.50': [-86.4986, -58.9898, -168.5303, 22.2441],
    '1.60': [-96.5693, -67.3545, -188.2002, 29.3782],
    '1.70': [-107.1967, -76.2756, -208.7994, 37.5440],
    '1.80': [-118.3808, -85.7532, -230.3065, 46.8032],
    '1.90': [-130.1215, -95.7872, -252.6999, 57.2199],
    '2.00': [-142.4187, -106.3776, -275.9588, 68.8584],
    '2.10': [-155.2725, -117.5245, -300.0624, 81.7859],
    '2.20': [-168.6829, -129.2278, -324.9893, 96.0717],
    '2.30': [-182.6500, -141.4877, -350.7195, 111.7864],
    '2.40': [-197.1736, -154.3040, -377.2325, 129.0031],
    '2.50': [-212.2537, -167.6768, -404.5088, 147.7963],
    '2.60': [-227.8904, -181.6061, -432.5277, 168.2444],
    '2.70': [-244.0836, -196.0918, -461.2696, 190.4276],
    '2.80': [-260.8334, -211.1341, -490.7150, 214.4290],
    '2.90': [-278.1398, -226.7329, -520.8432, 240.3359],
    '3.00': [-296.0026, -242.8881, -551.6373, 268.2337],
    '3.10': [-314.4220, -259.5999, -583.0751, 298.2191],
    '3.20': [-333.3980, -276.8681, -615.1380, 330.3862],
    '3.30': [-352.9306, -294.6929, -647.8073, 364.8345],
    '3.40': [-373.0196, -313.0742, -681.0644, 401.6651],
    '3.50': [-393.6652, -332.0120, -714.8885, 440.9885],
    '3.60': [-414.8673, -351.5063, -749.2626, 482.9143],
    '3.70': [-436.6260, -371.5571, -784.1665, 527.5574],
    '3.80': [-458.9412, -392.1645, -819.5817, 575.0401],
    '3.90': [-481.8129, -413.3283, -855.4896, 625.4872],
    '4.00': [-505.2412, -435.0487, -891.8720, 679.0272],
    '4.10': [-529.2260, -457.3255, -928.7091, 735.7975],
    '4.20': [-553.7673, -480.1590, -965.9837, 795.9370],
    '4.30': [-578.8652, -503.5488, -1003.6780, 859.5922],
    '4.40': [-604.5196, -527.4953, -1041.7714, 926.9193],
    '4.50': [-630.7305, -551.9982, -1080.2490, 998.0730],
    '4.60': [-657.4980, -577.0577, -1119.0900, 1073.2222],
    '4.70': [-684.8220, -602.6736, -1158.2783, 1152.5375],
    '4.80': [-712.7025, -628.8462, -1197.7969, 1236.2004],
    '4.90': [-741.1395, -655.5752, -1237.6232, 1324.3964],
    '5.00': [-770.1331, -682.8607, -1277.7470, 1417.3252],
    '5.10': [-799.6831, -710.7028, -1318.1400, 1515.1846],
    '5.20': [-829.7898, -739.1013, -1358.8029, 1618.1943],
    '5.30': [-860.4529, -768.0564, -1399.6945, 1726.5684],
    '5.40': [-891.6726, -797.5680, -1440.8180, 1840.5424],
    '5.50': [-923.4488, -827.6362, -1482.1579, 1960.3561],
    '5.60': [-955.7816, -858.2608, -1523.6726, 2086.2627],
    '5.70': [-988.6708, -889.4420, -1565.3693, 2218.5202],
    '5.80': [-1022.1166, -921.1797, -1607.2288, 2357.4064],
    '5.90': [-1056.1189, -953.4739, -1649.2451, 2503.2080],
    '6.00': [-1090.6288, -986.2972, -1691.7464, 2654.5400],
    '6.10': [-1125.9842, -1019.7202, -1732.4750, 2821.6762],
    '6.20': [-1161.8838, -1053.6988, -1773.3227, 2997.0193],
    '6.30': [-1198.3227, -1088.2327, -1814.2941, 3180.7520],
    '6.40': [-1235.2963, -1123.3216, -1855.4322, 3373.0431],
    '6.50': [-1272.7997, -1158.9654, -1896.7438, 3574.0280],
    '6.60': [-1310.8282, -1195.1636, -1938.3152, 3783.8163],
    '6.70': [-1349.3769, -1231.9160, -1980.0782, 4002.4960],
    '6.80': [-1388.4413, -1269.2223, -2022.1012, 4230.1342],
    '6.90': [-1428.0322, -1307.0832, -2064.3734, 4467.3745],
    '7.00': [-1468.1752, -1345.5003, -2106.6157, 4715.6575],
    '7.10': [-1508.8153, -1384.4132, -2149.5672, 4971.2934],
    '7.20': [-1550.0728, -1423.9422, -2191.7483, 5243.3354],
    '7.30': [-1591.8884, -1464.0278, -2233.8453, 5528.2217],
    '7.40': [-1634.2625, -1504.6698, -2275.8782, 5826.5271],
    '7.50': [-1677.1953, -1545.8683, -2317.7633, 6138.8924],
    '7.60': [-1720.6875, -1587.6234, -2359.5292, 6465.9681],
    '7.70': [-1764.7394, -1629.9351, -2401.1642, 6808.4541],
    '7.80': [-1809.3517, -1672.8032, -2442.6331, 7167.0543],
    '7.90': [-1854.5251, -1716.2279, -2483.9026, 7542.6301],
    '8.00': [-1898.622, -1760.1617, -2539.1703, 7818.9764],
    '8.10': [-1946.5580, -1804.7468, -2565.9344, 8347.9434],
    '8.20': [-1993.4193, -1849.8410, -2606.5702, 8779.5361],
    '8.30': [-2040.8451, -1895.4917, -2646.9174, 9231.7961],
    '8.40': [-2088.8366, -1941.6989, -2687.0005, 9705.7870],
    '8.50': [-2137.3949, -1988.4628, -2726.7835, 10202.6524],
    '8.60': [-2186.5214, -2035.7831, -2766.2514, 10723.7283],
    '8.70': [-2236.2176, -2083.6600, -2805.3479, 11270.2930],
    '8.80': [-2286.4850, -2132.0933, -2844.0766, 11843.8666],
    '8.90': [0.0, 0.0, -2844.0766, 11843.8666],
    '9.00': [0.0, 0.0, -2844.0766, 11843.8666],
    '10.0': [-2933.5564, -2756.7025, -3281.2439, 21297.6851],
    '14.0': [-5676.2972, -5417.5158, -4310.1766, 144399.039]
}

lec_list_nucl_2 = {
    #Lambda     C1      C2      D0 (a(2,1S0)=-22.x B(2,3S1)=2.2 B(3)=8.48)
    '1.00': [-44.452881, -24.865314, -1.090890],
    '1.25': [-63.713196, -39.701653, 7.038951],
    '1.50': [-86.452591, -58.014429, 20.215887],
    '1.75': [-112.670937, -79.804432, 39.352447],
    '2.00': [-142.367920, -105.072079, 65.398024],
    '2.25': [-175.543495, -133.817606, 99.360264],
    '2.50': [-212.197571, -166.041167, 142.312382],
    '2.75': [-252.330353, -201.742841, 195.411046],
    '3.00': [-295.941406, -240.922703, 259.914609],
    '3.25': [-343.030983, -283.580794, 337.185927],
    '3.50': [-393.599060, -329.717148, 428.727069],
    '3.75': [-447.645454, -379.331792, 536.167894],
    '4.00': [-505.170349, -432.424733, 661.319374],
    '4.50': [-630.655548, -549.045587, 972.883628],
    '5.00': [-770.054016, -679.579793, 1381.913369],
    '5.50': [-923.366302, -824.027382, 1911.066441],
    '6.00': [-1090.592316, -982.388428, 2588.121061],
    '6.50': [-1271.731659, -1154.662904, 3447.416722],
    '7.00': [-1466.784790, -1340.850860, 4531.265494],
    '7.50': [-1675.751495, -1540.952314, 5892.121670],
    '8.00': [-1898.631287, -1754.967263, 7594.603203],
    '8.50': [-2135.424988, -1982.895717, 9720.229049],
    '9.00': [-2386.132385, -2224.737643, 12367.676809],
    '9.50': [-2650.753189, -2480.493135, 15662.699273],
    '10.0': [-2929.287720, -2750.162114, 19760.444731],
}

lec_list_nucl_3 = {
    # L[fm^-1] C_0[nucl-Martin]      D_0[nucl-Martin]   C_0[nucl-Rimas-unproj]      D_0[nucl-Rimas-unproj]     C_0[nucl-Rimas-proj]      D_0[nucl-Rimas-proj]
    '0.50': [-16.3721, 4.436, -16.3721, 4.4445, -16.3721, 4.436],
    '0.75': [-28.6714, 12.936, -28.6714, 12.94, -28.6714, 12.936],
    '1.00': [-44.4515, 27.245, -44.4515, 27.207, -44.4515, 27.245],
    '1.50': [-86.4495, 79.22, -86.4495, 78.852, -86.4495, 79.22],
    '2.00': [-142.3625, 173.925, -142.3625, 172.58, -142.3625, 173.925],
    '3.00': [-295.93, 566.65, -295.93, 559.05, -295.93, 566.65],
    '4.00': [-505.15, 1426.75, -505.15, 1400.13, -505.15, 1426.75],
    '6.00': [-1090.548, 6552.5, -1090.548, 6354.8, -1090.548, 6552.5],
    '8.00': [-1898.553, 25697.0, -1898.553, 24309, -1898.553, 25697],
    '10.0': [-2929.165, 92495.0, -2929.165, 87840, -2929.165, 92495]
}

lec_list_nucl_4 = {  #d0GS  TNI-UIX  ZENTRAL    NNN        PROJ           d0ES
    '2.00':
    [-142.364, -106.2793, 68.488, 66.8240, 33.4723, -276.2272, -0.830307],
    '4.00':
    [-505.164, -434.9584, 677.799, 724.4771, 338.7663, -892.3704, -7.645753],
    '6.00': [
        -1090.584, -986.2518, 2652.651, 3198.9831, 1355.3977, -1692.1660,
        -16.854889
    ],
    '8.00':
    [-1898.622, -1760.1617, 7816.228, 0.0, 4101.7017, -2539.0099, -27.502527],
    '10.0': [
        -2929.277, -2756.6884, 20483.217, 0.0, 11095.8257, -3328.0227,
        -39.169742
    ],
    '12.0': [
        -4182.363, -3975.6195, 50939.941, 0.0, 28724.6969, -3999.5813,
        -52.024708
    ],
    '15.0': [
        -6479.576, -6221.5028, 195570.801, 0.0, 118778.9520, -4694.7019,
        -71.996883
    ]
}

lec_list_cib = {
    #    L       CT      CS         D0 GS           CPP
    '2.00': [-142.364, -106.2793, 68.4883, -0.830307],
    '4.00': [-505.164, -434.9584, 677.7989, -7.645753],
    '6.00': [-1090.584, -986.2518, 2652.651, -16.854889],
    '8.00': [-1898.622, -1760.1617, 7816.228, -27.502527],
    '10.0': [-2929.277, -2756.6884, 20483.217, -39.169742],
    '12.0': [-4182.363, -3975.6195, 50939.941, -52.024708],
    '15.0': [-6479.576, -6221.5028, 195570.801, -71.996883],
}

lec_list_oneMEV = {  #d0GS TNI-UIX  ZENTRAL NNN   PROJ           d0ES
    '0.05': [-1.551665, 0.324253617188],
    '0.10': [-2.241663, 0.2456829375],
    '0.16': [-3.25382381543, 0.0190507091372],
    '0.20': [-4.040227, -0.223247242969],
    '0.22': [-4.46682689578, -0.374771360196],
    '0.25': [-5.14850032428, -0.641645783435],
    '0.30': [-6.396510, -1.20682104512],
    '0.35': [-7.8083, -1.98064161217],
    '0.40': [-9.31007578154, -2.82776987047],
    '0.45': [-10.9761364604, -3.91309051448],
    '0.50': [-12.78163, -5.20893734689],
    '0.55': [-14.7258111587, -6.71792212184],
    '0.60': [-16.8090746843, -8.46827168904],
    '0.65': [-19.03174482, -10.4630055535],
    '0.70': [-21.39405, -12.7344455911],
    '0.75': [-23.8940370852, -15.2760761543],
    '0.80': [-26.53580, -18.1374520182],
    '0.90': [-32.23375, -24.8126425911],
    '0.95': [-35.29122, -28.6644794764],
    '1.00': [-38.48853, -32.9110143276],
    '1.05': [-41.82441, -37.5268116221],
    '1.10': [-45.29949, -42.5703870486],
    '1.20': [-52.66596, -53.9705109645],
    '1.50': [-78.11106, -100.476136019],
    '2.00': [-131.64598, -232.412644337],
    '3.00': [-280.45691, -854.107499493],
    '4.00': [-484.92093, -2495.36419052],
    '6.00': [-1060.7967, -16915.6302127],
    #'10.0': [-2880.3865, -756723.220071],
    # TNI below is fitted to B(3) = 8.48
    '10.0': [-2880.3865, -29933.4954397]
}

lec_list_unitary = {
    #L [fm-1]   C0  D0
    '1.50': [-62.6076, -13.3650],
    '2.00': [-111.3024, 8.4620],
    '3.00': [-250.4304, 123.1780],
    '4.00': [-445.2096, 372.6020],
    '6.00': [-1001.7216, 1524.2500],
    '8.00': [-1780.8384, 4165.5500],
    '10.0': [-2782.5600, 9491.9000]
}

lec_list_SU4 = {  #d0GS TNI-UIX  ZENTRAL NNN   PROJ           d0ES
    '0.50': [-16.3721, 4.436],
    '0.75': [-28.6714, 12.936],
    '1.00': [-44.4515, 27.245],
    '1.50': [-86.4495, 79.22],
    '2.00': [-142.3625, 173.925],
    '3.00': [-295.93, 558.49338400],
    '4.00': [-505.15, 1395.62624049],
    '6.00': [-1090.548, 6293.03337496],
    '8.00': [-1898.553, 23937.61505980],
    '10.0': [-2929.165, 85318.84107084]
}

lec_list_m1 = {
    '1.00': [-0.671, -0.3521],
    '5.00': [-16.775, -2.4748],
    '10.0': [-67.100, 1.2389],
    '20.0': [-268.401, 46.5717],
    '30.0': [-603.902, 180.0491],
    '40.0': [-1073.604, 436.2832],
    '50.0': [-1677.500, 854.0382],
    '75.0': [-3774.388, 2844.3864],
    '100.': [-6710.010, 6830.0766],
}

# Gaussian width parameters optimized to scattering calculations with
# V18/UIX interaction potentials

w120 = [
    129.5665, 51.3467, 29.47287, 13.42339, 8.2144556, 4.447413, 2.939,
    1.6901745, 1.185236, 0.84300, 0.50011, 0.257369, 0.13852, 0.071429,
    0.038519, 0.018573, 0.0097261, 0.00561943, 0.002765, 0.00101
]
w12 = [
    12.95665, 5.13467, 2.947287, 1.342339, .82144556, .4447413, 2.939,
    1.6901745, 1.185236, 0.84300, 0.50011, 0.257369, 0.13852, 0.071429,
    0.038519, 0.018573, 0.0097261, 0.00561943, 0.002765, 0.00101
]

# nuclear masses for various pion masses

mn = {
    '137': 938.91852,
    '300': 1053.0,
    '450': 1226.0,
    '510': 1320.0,
    '805': 1634.0
}

two_body_channels = {
    # r7 c2:    J              S  L              S_c
    'np1s': 1,  #  1   :   0  0  1S0         0
    'np3s': 2,  #  2   :   1  0  3S1         2
    'nn1s': 3,  #  4   :   0  0  1S0         0
    'nn3p': 4,  #  5   :   1  1  3P0,3P1,3P2 2
    'nn1d': 5,  #  6   :   0  2  1D2         2
    'nn3f': 6,  #  7   :   0  1  3F2,3F3,3F4 0
    'np1p': 7,  #  8   :   1  1  1P1         2
    'np3p': 8,  #  9   :   1  2  3P0,3P1,3P2 2
    'np3d': 9,  #  9   :   1  2  3D1,3D2,3D3 2
    'pp1s': 10,  #  9   :   1  2  1S0         2
    'pp3p': 11,  #  9   :   1  2  3P0,3P1,3P2 2
    'pp1d': 12,  #  9   :   1  2  1D0         2
    'pp3f': 13,  #  9   :   1  2  3F2,3F3,3F4 2
}

dict_3to4 = {
    't_no1': [['000-0'], ['tp_1s0']],
    't_no6': [['000-0'], ['tp_6s0']],
    'he_no1': [['000-0'], ['hen_1s0']],
    'he_no6': [['000-0'], ['hen_6s0']],
}

dict_4to5 = {
    'tp_1s0': [['000-0-0'], ['tpn_1s0h']],
    'tp_6s0': [['000-0-0'], ['tpn_6s0h']],
    'hen_1s0': [['000-0-0'], ['henn_1s0h']],
    'hen_6s0': [['000-0-0'], ['henn_6s0h']],
}

home = os.getcwd()

pathbase = home + '/..'
BINBDGpath = pathbase + '/src_nucl/'

# NN: tnni=10   NN+NNN: tnni=11
tnni = 11
tnifac = 1.
twofac = 1.
parall = -1

# limits the number of parallel processes in a single process pool
# if running on my laptop, I need to set this number in order to avoid
# too many files too be opened simulataneously
maxParLen = 120

cib = 0  # if set, EFTnoPi with charge independence broken by Coulomb and an acompanying
# contact-term correction is employed (leading order)

lam = 4.00  #0.50 0.75 1.00 1.50 2.00 3.00 4.00 6.00 8.00 10.0
# lec_list_nucl_n  : spin-dependent LO pionless interaction: 2 2-body LECs (deuteron, a(1S0)=-23fm), 1 3-body LEC (triton)
# lec_list_SU4     : spin-independent (SU(4) symmetric) LO pionless: 1 2-body LEC (deuteron), 1 3-body LEC (triton)
lec_set = lec_list_cib if cib else lec_list_SU4  #lec_list_m1  #  lec_list_unitary  # lec_list_oneMEV  #  lec_list_SU4  #

# list of suffices:
# _m1       : hbar/(2m) = 1  -> modified kinetic-energy operators (available for _v18-uix operator set, only, at present)
# _v18-uix  :
# _eft      :
# _eft-cib  :
# if there is a 'b' attached it refers to a symmetrization of the total wave function

bin_suffix = '_eft-cib' if cib else '_v18-uix'

if bin_suffix == '_v18-uix':
    inenOffset = 7
    nOperators = 31
    withCoul = False
elif bin_suffix == '_eft-cib':
    inenOffset = 6
    nOperators = 28
    withCoul = True
else:
    print('unrecognized operator structure.')
    exit()

# 2-body iso-spin and spin matrix elements
# <<< INOB
NNspinEXE = 'KOBER%s.exe' % bin_suffix

# 3-body iso-spin and spin matrix elements
# <<< INOB
NNNspinEXE = 'DROBER%s.exe' % bin_suffix

# 2-body orbital-angular-momentum structure of the spatial matrix elements
# <<< INLUCN
NNorbitalEXE = 'LUDW%s.exe' % bin_suffix

# 3-body orbital-angular-momentum structure of the spatial matrix elements
# <<< INLU
NNNorbitalEXE = 'DRLUD%s.exe' % bin_suffix

# calculation of Hamilton and Norm matrix combining (iso)spin, orbital, and radial wave-function components
# for 2-body operators
# <<< INQUA_N (2nd line = 2N potential)
NNhamilEXE_serial = 'QUAFL_N%s.exe' % bin_suffix
NNhamilEXE_pool = 'QUAFL_N%s_pop.exe' % bin_suffix
NNhamilEXE_mpi = 'V18_PAR/mpi_quaf_n%s' % bin_suffix
NNcollect_mpi = 'V18_PAR/sammel%s' % bin_suffix

# calculation of Hamilton and Norm matrix combining (iso)spin, orbital, and radial wave-function components
# for 3-body operators
# <<< INQUA_N (2nd line = 3N potential, otherwise identical to 2N INQUA_N)
NNNhamilEXE_serial = 'DRQUA_N%s.exe' % bin_suffix
NNNhamilEXE_pool = 'DRQUA_N%s_pop.exe' % bin_suffix
NNNhamilEXE_mpi = 'UIX_PAR/mpi_drqua_n%s' % bin_suffix
NNNcollect_mpi = 'UIX_PAR/drsammel%s' % bin_suffix

# diagonalization of the Norm- and Hamilton matrices
spectralEXE_serial = 'DR2END%s.exe' % bin_suffix
spectralEXE_mpi = 'TDR2END%s.exe' % bin_suffix
spectralEXE_serial_pool = 'DR2END%s_pop.exe' % bin_suffix
spectralEXE_mpi_pool = 'TDR2END%s_pop.exe' % bin_suffix

# calculation of scattering matrices/amplitudes as solutions to the Kohn variational functional
smatrixEXE = 'S-POLE_PdP.exe'
smatrixEXE_multichann = 'S-POLE_zget.exe'

la = ('%-4.2f' % lam)[:4]

if la in lec_set.keys():
    pass
else:
    print('LECs unavailable for chosen cutoff! Available cutoffs:\n',
          lec_set.keys())
    exit()

channels_2 = {
    # L    J
    'np3s': ['0', '1'],
    #'np1s': ['0', '0'],
}

channels_3 = {
    'he': [['000', ['he_no1', 'he_no6']]],
    't': [['000', ['t_no1', 't_no6']]],
    #'boltz': ['000', ['dist_3', 'dist_3']],
}

channels_4 = {
    'alpha': [
        ['000-0'],
        [
            #'dist_4',
            #'dist_4',
            #'dist_4',
            #'dist_4',
            #'dist_4',
            'tp_1s0',
            'tp_6s0',
            'hen_1s0',
            'hen_6s0'  #, 'np3s_np3s_S0', 'np1s_np1s_S0'
        ]
    ],
}

sysdir2base = pathbase + '/systems/2/%s' % la
sysdir3base = pathbase + '/systems/3/%s' % la
sysdir4 = pathbase + '/systems/4/%s' % la
sysdir5 = pathbase + '/systems/5-dist/%s' % la

nnpotstring = 'nn_pot'
nnnpotstring = 'nnn_pot'

nnpot = sysdir2base + '/' + nnpotstring
nnnpot = sysdir2base + '/' + nnnpotstring

if len(lec_set[la]) >= 4:
    cloW = 0.5 * (lec_set[la][0] + lec_set[la][1])
    cloB = 0.5 * (lec_set[la][0] - lec_set[la][1])
    d0 = lec_set[la][2]
    cpp = lec_set[la][3]
elif len(lec_set[la]) == 3:
    cloW = 0.5 * (lec_set[la][0] + lec_set[la][1])
    cloB = 0.5 * (lec_set[la][0] - lec_set[la][1])
    d0 = lec_set[la][2]
elif len(lec_set[la]) == 2:
    cloW = lec_set[la][0]
    cloB = 0.0
    d0 = lec_set[la][1]

evWindow = [-30, 150]

nzEN = 100
E0 = 0.01
D0 = 0.05
Eps = 0.2
Bet = 2.1

MeVfm = 197.3161329

widthSet_relative = w120

eps = np.finfo(float).eps
